Lazy Initialization: Lazy initialization of an object means that its creation is deferred until it is first used.
			If an object is expensive to create but program might not use it, we can use lazy initialization to avoid wasting system resource.

Lazy Loading:Lazy loading (also known as asynchronous loading) is a design pattern commonly used in computer programming and mostly in web design and development 
			to defer initialization of an object until the point at which it is needed. It can contribute to efficiency in the program's operation if 
			properly and appropriately used.

Eager Loading:Eager loading  is a design pattern where we initialize the required object before its being accessed , 
			which means we instantiate the object keep it ready to use it when we need it.

Eager loading: you do everything when asked. Classic example is when you multiply two matrices. You do all the calculations. That's eager loading;
Lazy loading: you only do a calculation when required. In the previous example, you don't do any calculations until you access an element of the result matrix; and
Over-eager loading: this is where you try and anticipate what the user will ask for and preload it.
I hope that makes sense in the context you're seeing it.

Let me give you a "Webby" example.

Imagine a page with rollover images like for menu items or navigation. There are three ways the image loading could work on this page:

Load every single image required before you render the page (eager);
Load only the displayed images on page load and load the others if/when they are required (lazy); and
Load only the displayed images on page load. After the page has loaded preload the other images in the background in case you need them (over-eager).